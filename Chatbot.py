import os
import logging
from flask import Flask
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, CallbackQueryHandler
import nest_asyncio
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

@app.route('/')
def index():
    return 'ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!'

# –¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç: –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="finance")],
        [InlineKeyboardButton("–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="account")]
    ]
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç, –Ω–∞ —Å–≤—è–∑–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –§–∏–Ω—É—Å–ª—É–≥! –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ üîé",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "finance":
        keyboard = [
            [InlineKeyboardButton("–í–∫–ª–∞–¥—ã", callback_data="deposit")],
            [InlineKeyboardButton("–û–°–ê–ì–û", callback_data="osago")],
            [InlineKeyboardButton("–ö—Ä–µ–¥–∏—Ç—ã", callback_data="credit")],
            [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="back_main")]
        ]
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å:", reply_markup=InlineKeyboardMarkup(keyboard))

    elif data == "account":
        await query.edit_message_text("–ï—Å–ª–∏ —É –í–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ø–æ–≤–æ–¥—É –≤–∞—à–µ–≥–æ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞‚Ä¶")

    elif data == "deposit":
        await query.edit_message_text("–£ –Ω–∞—Å –µ—Å—Ç—å 824 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –æ—Ç –Ω–∞–¥–µ–∂–Ω—ã—Ö –±–∞–Ω–∫–æ–≤‚Ä¶")

    elif data == "osago":
        await query.edit_message_text("–ü–æ–ª–∏—Å –û–°–ê–ì–û –∑–∞ 5 –º–∏–Ω—É—Ç‚Ä¶")

    elif data == "credit":
        await query.edit_message_text("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É –∏ –º—ã –ø–æ–¥–±–µ—Ä–µ–º –∫—Ä–µ–¥–∏—Ç—ã‚Ä¶")

    elif data == "back_main":
        keyboard = [
            [InlineKeyboardButton("–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="finance")],
            [InlineKeyboardButton("–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="account")]
        ]
        await query.edit_message_text("–ü—Ä–∏–≤–µ—Ç, –Ω–∞ —Å–≤—è–∑–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –§–∏–Ω—É—Å–ª—É–≥! –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ üîé",
                                      reply_markup=InlineKeyboardMarkup(keyboard))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
async def start_bot():
    token = os.getenv("BOT_TOKEN")  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ Render

    if not token:
        logger.error("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
        return

    app_telegram = ApplicationBuilder().token(token).build()
    app_telegram.add_handler(CommandHandler("start", start))
    app_telegram.add_handler(CallbackQueryHandler(button_handler))

    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await app_telegram.initialize()
    await app_telegram.start()
    await app_telegram.updater.start_polling()

# –ó–∞–ø—É—Å–∫ Flask –∏ Telegram
if __name__ == "__main__":
    nest_asyncio.apply()  # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç asyncio –≤ Flask + PTB

    loop = asyncio.get_event_loop()
    loop.create_task(start_bot())

    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port)